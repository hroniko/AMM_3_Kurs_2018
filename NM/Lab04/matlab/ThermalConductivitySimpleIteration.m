function [X, T, P, P1] = ThermalConductivitySimpleIteration(x1, x2, t1, t2, Nx, Nt, cicles)
% Функция для решения начальной краевой задачи для уравнения
% теплопроводности в прямоугольнике с помощью обычного итерационного
% приближения

% x1, x2 - начало и конец отрезка по оси Х
% t1, t2 - начало и конец отрезка по оси T
% Nx - число отрезков разбиения по оси X
% Nt - число отрезков разбиения по оси T
% cicles - количество уиклов пересчета

h = abs(x2-x1)/Nx; % Расстояние между узлами
t = abs(t2-t1)/Nt; % Расстояние между узлами
P = zeros(Nt+1, Nx+1); % Формируем пустой вектор сеточных решений
X = x1:h:x2; % Формируем вектор X узловых точек
T = t1:t:t2; % Формируем вектор X узловых точек

% Заполняем боковые границы
% когда t = const = t1 (ось X)
for xj = 1 : Nx+1
    P(1, xj) = U(xj, t1);
end
% когда t = const = t2 (ось, параллельная оси X)
for xj = 1 : Nx+1
    P(Nt+1, xj) = U(xj, t2);
end
% когда x = const = x1 (ось T)
for ti = 1 : Nt+1
    P(ti, 1) = U(x1, ti);
end
% когда x = const = x2 (ось, параллельная оси T)
for ti = 1 : Nt+1
    P(ti, Nx+1) = U(x2, ti);
end

% выполняем пересчеты cicles раз, последовательно приближаясь к более
% точному решению
for c = 1 : cicles
    P_copy = P;
    % Заполняем внутренние части прямоугольника
    for ti = 2 : Nt % по каждой строке
        for xj = 2 : Nx % по каждому столбцу
            P_copy(ti, xj) = 1/4 * ( P(ti-1, xj) + P(ti+1, xj) + P(ti, xj-1) + P(ti, xj+1) ) - 0.5/( 1/(h^2) + 1/(t^2) ) * F(xj, ti);        
        end    
    end
    P = P_copy;
end


%[T,X] = meshgrid(T,1:20);
% Z = sin(X) + cos(Y);
% surf(X,T,P)
P1 = zeros(Nt+2, Nx+2);
for t = 2 : Nt+2 % добавляем слева колонку значений t
    P1(t, 1) = T(t-1);    
end
for x = 2 : Nx+2 % добавляем сверху колонку значений x
    P1(1, x) = X(x-1);    
end
for ti = 2 : Nt+2 % по каждой строке
    for xj = 2 : Nx+2 % по каждому столбцу
        P1(ti, xj) = P(ti-1, xj-1);        
    end    
end

end